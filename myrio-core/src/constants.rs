/// Maps a `u8 as usize` representing a 'Phred Quality Score' into its respective 'Probability of Incorrect Base Call'.
/// Generally the 'Phred Quality Score' ∈ {0, ..., 40}, but here out of paranoia and to be consistent with the other map, we assume this score can take any value a `u8` could.
/// Values were computed using the formula `p = 10^(-Q/10), see `_compute_phred_quality_score_to_base_call_error_probability_map()` below.
#[rustfmt::skip]
pub const Q_TO_BP_CALL_ERROR_PROB_MAP: [f64; 128] = [1.0, 0.7943282347242815, 0.6309573444801932, 0.5011872336272722, 0.3981071705534972, 0.31622776601683794, 0.251188643150958, 0.19952623149688797, 0.15848931924611134, 0.12589254117941673, 0.1, 0.07943282347242814, 0.06309573444801933, 0.05011872336272722, 0.039810717055349734, 0.03162277660168379, 0.025118864315095794, 0.0199526231496888, 0.015848931924611134, 0.012589254117941675, 0.01, 0.007943282347242814, 0.00630957344480193, 0.005011872336272725, 0.003981071705534973, 0.0031622776601683794, 0.0025118864315095794, 0.001995262314968879, 0.001584893192461114, 0.0012589254117941675, 0.001, 0.0007943282347242813, 0.000630957344480193, 0.0005011872336272725, 0.00039810717055349735, 0.00031622776601683794, 0.00025118864315095795, 0.00019952623149688788, 0.00015848931924611142, 0.00012589254117941674, 0.0001, 7.943282347242822e-5, 6.309573444801929e-5, 5.011872336272725e-5, 3.9810717055349695e-5, 3.1622776601683795e-5, 2.5118864315095822e-5, 1.9952623149688786e-5, 1.584893192461114e-5, 1.2589254117941661e-5, 1e-5, 7.943282347242822e-6, 6.30957344480193e-6, 5.011872336272725e-6, 3.981071705534969e-6, 3.162277660168379e-6, 2.5118864315095823e-6, 1.9952623149688787e-6, 1.584893192461114e-6, 1.2589254117941661e-6, 1e-6, 7.943282347242822e-7, 6.30957344480193e-7, 5.011872336272725e-7, 3.981071705534969e-7, 3.162277660168379e-7, 2.5118864315095823e-7, 1.9952623149688787e-7, 1.584893192461114e-7, 1.2589254117941662e-7, 1e-7, 7.943282347242822e-8, 6.30957344480193e-8, 5.011872336272725e-8, 3.981071705534969e-8, 3.162277660168379e-8, 2.511886431509582e-8, 1.9952623149688786e-8, 1.5848931924611143e-8, 1.2589254117941661e-8, 1e-8, 7.943282347242822e-9, 6.309573444801943e-9, 5.011872336272715e-9, 3.981071705534969e-9, 3.1622776601683795e-9, 2.511886431509582e-9, 1.9952623149688828e-9, 1.584893192461111e-9, 1.2589254117941663e-9, 1e-9, 7.943282347242822e-10, 6.309573444801942e-10, 5.011872336272714e-10, 3.9810717055349694e-10, 3.1622776601683795e-10, 2.511886431509582e-10, 1.9952623149688828e-10, 1.584893192461111e-10, 1.2589254117941662e-10, 1e-10, 7.943282347242822e-11, 6.309573444801942e-11, 5.011872336272715e-11, 3.9810717055349695e-11, 3.1622776601683794e-11, 2.5118864315095823e-11, 1.9952623149688828e-11, 1.5848931924611107e-11, 1.2589254117941662e-11, 1e-11, 7.943282347242821e-12, 6.309573444801943e-12, 5.011872336272715e-12, 3.9810717055349695e-12, 3.1622776601683794e-12, 2.5118864315095823e-12, 1.9952623149688827e-12, 1.584893192461111e-12, 1.258925411794166e-12, 1e-12, 7.943282347242822e-13, 6.309573444801942e-13, 5.011872336272715e-13, 3.981071705534969e-13, 3.162277660168379e-13, 2.511886431509582e-13, 1.9952623149688827e-13];

pub fn _compute_phred_quality_score_to_base_call_error_probability_map() -> [f64; 128] {
    let mut map: [f64; 128] = [0.0; 128];

    // `q`is the 'Phred quality score'
    for (q, val) in map.iter_mut().enumerate() {
        *val = 10_f64.powf(-(q as f64) / 10.0);
    }
    map
}

/// Maps a `u8 as usize` representing a 'Phred Quality Score' into its respective 'Probability of Correct Base Call'.
/// Generally the 'Phred Quality Score' ∈ {0, ..., 40}, but here out of paranoia and to be consistent with the other map, we assume this score can take any value a `u8` could.
/// Values were computed using the formula `p = 1 - 10^(-Q/10), see `_compute_phred_quality_score_to_base_call_correct_probability_map()` below.
#[rustfmt::skip]
pub const Q_TO_BP_CALL_CORRECT_PROB_MAP: [f64; 128] = [0.0, 0.2056717652757185, 0.36904265551980675, 0.49881276637272776, 0.6018928294465028, 0.683772233983162, 0.748811356849042, 0.800473768503112, 0.8415106807538887, 0.8741074588205833, 0.9, 0.9205671765275718, 0.9369042655519807, 0.9498812766372727, 0.9601892829446502, 0.9683772233983162, 0.9748811356849042, 0.9800473768503112, 0.9841510680753889, 0.9874107458820583, 0.99, 0.9920567176527572, 0.993690426555198, 0.9949881276637272, 0.996018928294465, 0.9968377223398316, 0.9974881135684904, 0.9980047376850312, 0.9984151068075389, 0.9987410745882058, 0.999, 0.9992056717652757, 0.9993690426555198, 0.9994988127663728, 0.9996018928294464, 0.9996837722339832, 0.999748811356849, 0.9998004737685031, 0.9998415106807539, 0.9998741074588205, 0.9999, 0.9999205671765276, 0.9999369042655519, 0.9999498812766373, 0.9999601892829446, 0.9999683772233983, 0.9999748811356849, 0.9999800473768503, 0.9999841510680754, 0.999987410745882, 0.99999, 0.9999920567176528, 0.9999936904265552, 0.9999949881276637, 0.9999960189282945, 0.9999968377223398, 0.9999974881135685, 0.9999980047376851, 0.9999984151068075, 0.9999987410745882, 0.999999, 0.9999992056717653, 0.9999993690426555, 0.9999994988127664, 0.9999996018928294, 0.999999683772234, 0.9999997488113569, 0.9999998004737685, 0.9999998415106808, 0.9999998741074588, 0.9999999, 0.9999999205671766, 0.9999999369042656, 0.9999999498812766, 0.9999999601892829, 0.9999999683772234, 0.9999999748811357, 0.9999999800473769, 0.999999984151068, 0.9999999874107459, 0.99999999, 0.9999999920567176, 0.9999999936904266, 0.9999999949881276, 0.9999999960189283, 0.9999999968377223, 0.9999999974881135, 0.9999999980047377, 0.9999999984151068, 0.9999999987410746, 0.999999999, 0.9999999992056717, 0.9999999993690426, 0.9999999994988128, 0.9999999996018928, 0.9999999996837723, 0.9999999997488114, 0.9999999998004737, 0.9999999998415107, 0.9999999998741075, 0.9999999999, 0.9999999999205672, 0.9999999999369042, 0.9999999999498813, 0.9999999999601893, 0.9999999999683772, 0.9999999999748811, 0.9999999999800474, 0.9999999999841511, 0.9999999999874107, 0.99999999999, 0.9999999999920567, 0.9999999999936904, 0.9999999999949881, 0.999999999996019, 0.9999999999968378, 0.9999999999974881, 0.9999999999980047, 0.9999999999984152, 0.9999999999987411, 0.999999999999, 0.9999999999992056, 0.9999999999993691, 0.9999999999994988, 0.9999999999996019, 0.9999999999996838, 0.9999999999997488, 0.9999999999998005];

pub fn _compute_phred_quality_score_to_base_call_correct_probability_map() -> [f64; 128] {
    let mut map: [f64; 128] = [0.0; 128];

    // `q`is the 'Phred quality score'
    for (q, val) in map.iter_mut().enumerate() {
        *val = 1.0 - 10_f64.powf(-(q as f64) / 10.0);
    }
    map
}

/// Obtained experimentally
#[rustfmt::skip]
pub(crate) const OBSERVED_Q_SCORE_CUMMUL_FREQ: [f64; 41] = [
    0.0, 2.68953393e-04, 5.69554715e-03, 2.43616857e-02,
    5.69442911e-02, 9.83357123e-02, 1.43028724e-01, 1.85568252e-01,
    2.24820989e-01, 2.61233883e-01, 2.95625883e-01, 3.28616438e-01,
    3.60643874e-01, 3.92169862e-01, 4.23491155e-01, 4.54940339e-01,
    4.86660050e-01, 5.18859644e-01, 5.51574575e-01, 5.84902833e-01,
    6.18956183e-01, 6.53794544e-01, 6.89246839e-01, 7.25249907e-01,
    7.61609172e-01, 7.97842574e-01, 8.33153333e-01, 8.66356580e-01,
    8.96342126e-01, 9.22066069e-01, 9.43142934e-01, 9.59716815e-01,
    9.72279533e-01, 9.81483394e-01, 9.87986881e-01, 9.92487061e-01,
    9.95518922e-01, 9.97476939e-01, 9.98729194e-01, 9.99504143e-01,
    1.0,
];

/// Obtained experimentally
#[rustfmt::skip]
pub(crate) const OBSERVED_Q_SCORE_BLOCK_SIZE_CUMMUL_FREQ: [f64; 15] = [
    0.0, 0.34458653, 0.57879562, 0.73259496,
    0.83996226, 0.89905423, 0.93538613, 0.95836335,
    0.97319795, 0.98278344, 0.98912095, 0.99347341,
    0.99649658, 0.99855931, 1.0
];

pub(crate) const MAX_Q_SCORE: u8 = 40;
pub(crate) const MIN_Q_SCORE: u8 = 1; // Technically 0, but we'll use 1 in this case as we never observe 0
